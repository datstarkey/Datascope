{"version":3,"sources":["Utilities/GamesListApi.ts","Components/Context/Context.tsx","Utilities/ToastMessage.ts","Components/GameModal.tsx","Components/GameDetails.tsx","Components/GameList.tsx","Utilities/LoginApi.ts","Components/Login/LoginModal.tsx","Components/Login/LoginDetails.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["a","fetch","response","json","body","console","log","game","token","method","headers","Accept","Authorization","JSON","stringify","ok","AppContext","React","createContext","children","useState","authenticated","setAuthenticated","values","bearer","setBearer","Provider","value","SuccessToast","title","description","notification","success","message","placement","DangerToast","error","GameModal","props","useContext","TextArea","Input","freshGame","Form","useForm","form","modal","setModal","currentGame","setCurrentGame","loading","setLoading","type","className","onClick","update","setFieldsValue","resetFields","id","visible","onOk","validateFields","then","UpdateGame","refreshList","catch","confirmLoading","onCancel","labelCol","span","wrapperCol","layout","onValuesChange","newGame","Item","label","name","rules","required","Array","map","x","i","Option","key","format","releaseDate","onChange","GameDetails","date","context","headStyle","color","background","bodyStyle","style","width","rating","Date","toDateString","fontSize","danger","marginLeft","DeleteGame","GameList","list","setList","gottenList","setGottenList","getGameList","GetGameList","result","useEffect","data-testid","marginTop","item","index","user","LoginModal","cookies","Cookies","setUser","submitForm","Login","set","err","float","footer","Register","newUser","Password","LoginDetails","remove","Header","Layout","Content","Footer","App","bearerToken","get","RefreshLogin","display","src","alt","padding","textAlign","href","Boolean","window","location","hostname","match","ReactDOM","render","Context","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f345d1b.chunk.js","sourcesContent":["import { IGame } from \"../Interfaces/IGame\";\r\n\r\nexport async function GetGameList(): Promise<IGame[]> {\r\n  const response = await fetch(\"/GamesList\");\r\n  try {\r\n    const body = await response.json();\r\n    return body;\r\n  } catch {\r\n    console.log(response);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function UpdateGame(game: IGame, token: string): Promise<boolean> {\r\n  const response = await fetch(\"/GamesList\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(game),\r\n  });\r\n\r\n  return response.ok;\r\n}\r\n\r\nexport async function DeleteGame(game: IGame, token: string): Promise<boolean> {\r\n  const response = await fetch(\"/GamesList\", {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(game),\r\n  });\r\n\r\n  return response.ok;\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\ntype Props = {\r\n  children: React.ReactNode;\r\n};\r\n\r\ntype ContextProps = {\r\n  authenticated: boolean;\r\n  setAuthenticated: (value: boolean) => void;\r\n  bearer: string;\r\n  setBearer: (value: string) => void;\r\n};\r\n\r\nexport const AppContext = React.createContext<Partial<ContextProps>>({});\r\n\r\nexport default ({ children }: Props) => {\r\n  const [authenticated, setAuthenticated] = useState(false);\r\n  const [bearer, setBearer] = useState(\"\");\r\n\r\n  const values = {\r\n    authenticated: authenticated,\r\n    setAuthenticated: setAuthenticated,\r\n    bearer: bearer,\r\n    setBearer: setBearer,\r\n  };\r\n  return <AppContext.Provider value={values}> {children} </AppContext.Provider>;\r\n};\r\n","import { notification } from \"antd\";\r\n\r\nexport const SuccessToast = (title: string, description: string) => {\r\n  notification.success({\r\n    message: title,\r\n    description: description,\r\n    placement: \"bottomRight\",\r\n  });\r\n};\r\n\r\nexport const DangerToast = (title: string, description: string) => {\r\n  notification.error({\r\n    message: title,\r\n    description: description,\r\n    placement: \"bottomRight\",\r\n  });\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport { UpdateGame } from \"../Utilities/GamesListApi\";\r\nimport { SuccessToast, DangerToast } from \"../Utilities/ToastMessage\";\r\nimport { Form, Input, Select, DatePicker, Modal, Button } from \"antd\";\r\nimport format from \"moment\";\r\nimport { IGame } from \"../Interfaces/IGame\";\r\nimport { AppContext } from \"./Context/Context\";\r\n\r\n//Need to convert props to typescript\r\nexport const GameModal = (props: any) => {\r\n  const context = useContext(AppContext);\r\n  const token: string = context.bearer || \"\";\r\n  const { TextArea } = Input;\r\n  const freshGame: IGame = {} as any;\r\n  const [form] = Form.useForm();\r\n  const [modal, setModal] = useState<boolean>(false);\r\n  const [currentGame, setCurrentGame] = useState<IGame>(freshGame);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const updateGame = () => {\r\n    form\r\n      .validateFields()\r\n      .then(() => {\r\n        setLoading(true);\r\n        UpdateGame(currentGame, token).then((success) => {\r\n          if (success) {\r\n            if (props.update) {\r\n              SuccessToast(\"Success\", \"Game updated successfully\");\r\n            } else {\r\n              SuccessToast(\"Success\", \"Game added successfully\");\r\n            }\r\n          } else {\r\n            DangerToast(\"Error\", \"Could not connect to database, please check connection\");\r\n          }\r\n          props.refreshList();\r\n          setLoading(false);\r\n          setModal(false);\r\n        });\r\n      })\r\n      .catch(() => {});\r\n  };\r\n\r\n  const openModal = () => {\r\n    if (!props.update) {\r\n      form.resetFields();\r\n      setCurrentGame(freshGame);\r\n    } else {\r\n      form.setFieldsValue(props.game);\r\n      setCurrentGame(props.game);\r\n    }\r\n    setModal(true);\r\n  };\r\n\r\n  const setDate = (value: any) => {\r\n    var newGame = { ...currentGame };\r\n    newGame.releaseDate = value;\r\n    setCurrentGame(newGame);\r\n  };\r\n\r\n  const onFormChange = (values: any) => {\r\n    var newGame: IGame = { ...currentGame, ...values };\r\n    setCurrentGame(newGame);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button type=\"primary\" className=\"button-success\" onClick={openModal} id=\"modal-open-button\">\r\n        {props.title ? props.title : \"Add New Game\"}\r\n      </Button>\r\n\r\n      <Modal title=\"Update or Add Game\" visible={modal} onOk={updateGame} confirmLoading={loading} onCancel={() => setModal(false)}>\r\n        <Form form={form} labelCol={{ span: 4 }} wrapperCol={{ span: 14 }} layout=\"horizontal\" onValuesChange={onFormChange}>\r\n          <Form.Item label=\"Name\" name=\"name\" rules={[{ required: true, message: \"Game name cannot be blank\" }]}>\r\n            <Input id=\"name-input\" />\r\n          </Form.Item>\r\n          <Form.Item label=\"Description\" name=\"description\" rules={[{ required: true, message: \"Description cannot be blank\" }]}>\r\n            <TextArea id=\"description-input\" />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Rating\" name=\"rating\" rules={[{ required: true, message: \"Must submit a rating\" }]}>\r\n            <Select id=\"rating-input\">\r\n              {[...Array(10)].map((x, i) => (\r\n                <Select.Option key={i} value={10 - i}>\r\n                  {10 - i}\r\n                </Select.Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Release Date\" rules={[{ required: true, message: \"Must submit a release date\" }]}>\r\n            <DatePicker id=\"release-input\" value={format(currentGame.releaseDate)} onChange={setDate} />\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { IGame } from \"../Interfaces/IGame\";\r\nimport { SuccessToast, DangerToast } from \"../Utilities/ToastMessage\";\r\nimport { Card, Button } from \"antd\";\r\nimport { DeleteGame } from \"../Utilities/GamesListApi\";\r\nimport { GameModal } from \"./GameModal\";\r\nimport { AppContext } from \"./Context/Context\";\r\n\r\ntype GameProps = {\r\n  game: IGame;\r\n  refreshList: () => void;\r\n};\r\n\r\nexport const GameDetails = (props: GameProps) => {\r\n  const context = useContext(AppContext);\r\n  const token: string = context.bearer || \"\";\r\n\r\n  const deleteClick = () => {\r\n    DeleteGame(props.game, token).then((success) => {\r\n      if (success) {\r\n        SuccessToast(\"Success\", \"Game deleted successfully\");\r\n        props.refreshList();\r\n      } else {\r\n        DangerToast(\"Error\", \"Could not connect to database, please check connection\");\r\n      }\r\n    });\r\n  };\r\n\r\n  const getDateString = (date: Date): string => new Date(date).toDateString();\r\n\r\n  return (\r\n    <>\r\n      <Card\r\n        title={props.game.name}\r\n        className=\"card-width\"\r\n        headStyle={{ color: \"white\", background: \"#002766\" }}\r\n        bodyStyle={{ background: \"#fafafa\" }}\r\n      >\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td style={{ width: 100 }}>\r\n                <p>Rating : </p>\r\n              </td>\r\n              <td>\r\n                <p id=\"rating\">{props.game.rating}</p>\r\n              </td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td>\r\n                <p>Release Date : </p>\r\n              </td>\r\n              <td>\r\n                <p id=\"release-date\">{getDateString(props.game.releaseDate)}</p>\r\n              </td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td>\r\n                <p>Description : </p>\r\n              </td>\r\n              <td>\r\n                <p id=\"description\" style={{ fontSize: 11 }}>\r\n                  {props.game.description}\r\n                </p>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        {context.authenticated && <GameModal update={true} game={props.game} title=\"Edit\" refreshList={props.refreshList} />}\r\n        {context.authenticated && (\r\n          <Button type=\"primary\" danger style={{ marginLeft: 5 }} onClick={deleteClick}>\r\n            Delete\r\n          </Button>\r\n        )}\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { GetGameList } from \"../Utilities/GamesListApi\";\r\nimport { AppContext } from \"./Context/Context\";\r\nimport { IGame } from \"../Interfaces/IGame\";\r\nimport { GameModal } from \"./GameModal\";\r\nimport { GameDetails } from \"./GameDetails\";\r\n\r\nexport const GameList = () => {\r\n  const [list, setList] = useState<IGame[]>([]);\r\n  const [gottenList, setGottenList] = useState<boolean>(false);\r\n  const context = useContext(AppContext);\r\n\r\n  const getGameList = () => {\r\n    GetGameList().then((result) => {\r\n      setGottenList(true);\r\n      setList(result);\r\n    });\r\n  };\r\n\r\n  useEffect(() => getGameList(), []);\r\n\r\n  return (\r\n    <>\r\n      {context.authenticated && (\r\n        <div style={{ marginLeft: \"2rem\" }}>\r\n          <GameModal refreshList={getGameList} data-testid=\"new-game-button\" />\r\n        </div>\r\n      )}\r\n\r\n      {gottenList ? <h3 style={{ marginLeft: \"2rem\", marginTop: \"2rem\" }}>The List</h3> : <h3>Fetching list</h3>}\r\n      <div className=\"grid\" data-testid=\"game-grid\">\r\n        {list.map((item: IGame, index) => (\r\n          <div key={index} className=\"grid-item\" id={`grid-item-${index}`}>\r\n            <GameDetails game={item} refreshList={() => getGameList()} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { IUser } from \"./../Interfaces/IUser\";\r\n\r\nexport async function Register(user: IUser) {\r\n  const response = await fetch(\"/login/register\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(user),\r\n  });\r\n  return response.ok;\r\n}\r\n\r\nexport async function Login(user: IUser) {\r\n  const response = await fetch(\"/login\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(user),\r\n  });\r\n  return response;\r\n}\r\n\r\nexport async function RefreshLogin(token: string) {\r\n  const response = await fetch(\"/login/refresh\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response;\r\n}\r\n","import React, { useState, useContext } from \"react\";\r\nimport Cookies from \"universal-cookie\";\r\nimport { SuccessToast, DangerToast } from \"../../Utilities/ToastMessage\";\r\nimport { Form, Input, Modal, Button } from \"antd\";\r\nimport { IUser } from \"../../Interfaces/IUser\";\r\nimport { Login, Register } from \"../../Utilities/LoginApi\";\r\nimport { AppContext } from \"../Context/Context\";\r\n\r\ninterface props {\r\n  title: string;\r\n}\r\n\r\nexport const LoginModal = (props: props) => {\r\n  const cookies = new Cookies();\r\n  const [form] = Form.useForm();\r\n  const [modal, setModal] = useState<boolean>(false);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [user, setUser] = useState<IUser>({} as any);\r\n  const context = useContext(AppContext);\r\n\r\n  const registerUser = () => {\r\n    form\r\n      .validateFields()\r\n      .then(() => {\r\n        setLoading(true);\r\n        console.log(user);\r\n        Register(user).then((success) => {\r\n          if (success) {\r\n            SuccessToast(\"Success\", \"Registration successfull\");\r\n            setLoading(false);\r\n          } else {\r\n            DangerToast(\"Error\", \"Username already exists or error connecting to server\");\r\n            setLoading(false);\r\n          }\r\n        });\r\n      })\r\n      .catch(() => {});\r\n  };\r\n\r\n  const submitForm = () => {\r\n    form\r\n      .validateFields()\r\n      .then(() => {\r\n        setLoading(true);\r\n        Login(user)\r\n          .then((response) => response.json())\r\n          .then((result) => {\r\n            SuccessToast(\"Success\", \"Login successful\");\r\n            if (context.setAuthenticated) context.setAuthenticated(true);\r\n            if (context.setBearer) context.setBearer(result);\r\n            cookies.set(\"token\", result);\r\n            setLoading(false);\r\n            setModal(false);\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n            DangerToast(\"Error\", \"error connecting to server\");\r\n            setLoading(false);\r\n          });\r\n      })\r\n      .catch(() => {});\r\n  };\r\n\r\n  const onFormChange = (values: any) => {\r\n    var newUser: IUser = { ...user, ...values };\r\n    setUser(newUser);\r\n  };\r\n  return (\r\n    <>\r\n      <Button\r\n        type=\"primary\"\r\n        style={{ float: \"right\", marginTop: \"1rem\" }}\r\n        className=\"button-success\"\r\n        onClick={() => setModal(true)}\r\n        id=\"login-modal-button\"\r\n      >\r\n        {props.title}\r\n      </Button>\r\n\r\n      <Modal\r\n        title=\"Login\"\r\n        visible={modal}\r\n        onOk={submitForm}\r\n        confirmLoading={loading}\r\n        onCancel={() => setModal(false)}\r\n        footer={[\r\n          <Button danger onClick={registerUser}>\r\n            Register\r\n          </Button>,\r\n          <Button key=\"back\" onClick={() => setModal(false)}>\r\n            Return\r\n          </Button>,\r\n          <Button key=\"submit\" type=\"primary\" loading={loading} onClick={submitForm}>\r\n            Submit\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <Form form={form} labelCol={{ span: 6 }} wrapperCol={{ span: 14 }} layout=\"horizontal\" onValuesChange={onFormChange}>\r\n          <Form.Item label=\"Username\" name=\"username\" rules={[{ required: true, message: \"Username cannot be blank\" }]}>\r\n            <Input id=\"username-input\" />\r\n          </Form.Item>\r\n          <Form.Item label=\"Password\" name=\"password\" rules={[{ required: true, message: \"Password cannot be blank\" }]}>\r\n            <Input.Password id=\"password-input\" />\r\n          </Form.Item>\r\n          <Form.Item></Form.Item>\r\n        </Form>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../Context/Context\";\r\nimport { Button } from \"antd\";\r\nimport { LoginModal } from \"./LoginModal\";\r\nimport Cookies from \"universal-cookie\";\r\n\r\nexport const LoginDetails = () => {\r\n  const context = useContext(AppContext);\r\n  const cookies = new Cookies();\r\n  const logout = () => {\r\n    if (context.setAuthenticated) context.setAuthenticated(false);\r\n    if (context.setBearer) context.setBearer(\"\");\r\n    cookies.remove(\"token\");\r\n  };\r\n  return (\r\n    <>\r\n      {!context.authenticated ? (\r\n        <LoginModal title=\"Login\" />\r\n      ) : (\r\n        <Button style={{ float: \"right\", marginTop: \"1rem\" }} danger onClick={logout}>\r\n          Logout\r\n        </Button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useContext } from \"react\";\nimport \"./App.css\";\nimport { GameList } from \"./Components/GameList\";\nimport { Layout, Button } from \"antd\";\nimport { LoginDetails } from \"./Components/Login/LoginDetails\";\nimport { AppContext } from \"./Components/Context/Context\";\nimport Cookies from \"universal-cookie\";\nimport { RefreshLogin } from \"./Utilities/LoginApi\";\nconst { Header, Content, Footer } = Layout;\n\nfunction App() {\n  const context = useContext(AppContext);\n  const cookies = new Cookies();\n\n  useEffect(() => {\n    var bearerToken = cookies.get(\"token\");\n    if (bearerToken) {\n      RefreshLogin(bearerToken)\n        .then((response) => response.json())\n        .then((result) => {\n          cookies.set(\"token\", result);\n          if (context.setAuthenticated) context.setAuthenticated(true);\n          if (context.setBearer) context.setBearer(result);\n        })\n        .catch((err) => {\n          console.log(err);\n          cookies.remove(\"token\");\n        });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <Layout className=\"layout\">\n      <Header style={{ background: \"#002766\" }} data-testid=\"header\">\n        <img style={{ display: \"inline\" }} src=\"/jgl-logo.png\" alt=\"logo\" className=\"logo\" />\n\n        <h1 style={{ display: \"inline\", marginLeft: 10 }} className=\"alt-color\">\n          Jakes Gaming List\n        </h1>\n\n        <LoginDetails />\n      </Header>\n      <Content style={{ padding: \"0 50px\" }} data-testid=\"main-content\">\n        <div className=\"site-layout-content\">\n          <GameList />\n        </div>\n      </Content>\n      <Footer style={{ textAlign: \"center\" }} data-testid=\"footer\">\n        © Jake Starkey - Inteded for use as a demonstration Task for Datascope\n        <Button href=\"https://github.com/datstarkey/Datascope\" style={{ marginLeft: 5 }}>\n          Github\n        </Button>\n      </Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Context from \"./Components/Context/Context\";\n\nReactDOM.render(\n  <Context>\n    <App />\n  </Context>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}